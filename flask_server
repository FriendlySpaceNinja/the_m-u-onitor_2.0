import time
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Initialize a dictionary to store the data received from the Arduino (sent by the local machine)
data = {
    "count": 0,
    "uptime": "00:00:00",
    "sensor_name": "Cosmic Watch",
    "hit_rate": "0.00",
    "total_count": 0,
    "daily_counts": {},
    "start_time": None
}

# Function to format uptime in hh:mm:ss format
def get_uptime():
    elapsed_time = time.time() - start_time
    days = int(elapsed_time // 86400)  # 1 day = 86400 seconds
    hours = int((elapsed_time % 86400) // 3600)
    minutes = int((elapsed_time % 3600) // 60)
    seconds = int(elapsed_time % 60)

    # Build the formatted uptime string
    if days > 0:
        return f"{hours}h:{minutes}m:{seconds}s - ({days} days)"
    else:
        return f"{hours}h:{minutes}m:{seconds}s"

# Function to calculate hit rate
def calculate_hit_rate():
    elapsed_time = time.time() - start_time
    if elapsed_time > 0:
        return data['total_count'] / elapsed_time
    else:
        return 0

# Function to reset the daily count at midnight
def reset_daily_count():
    while True:
        current_time = time.localtime()
        # Check if it's midnight (00:00)
        if current_time.tm_hour == 0 and current_time.tm_min == 0:
            current_day = time.strftime('%Y-%m-%d')
            data["daily_counts"][current_day] = 0
        time.sleep(60)  # Sleep for a minute before checking again

@app.route('/')
def index():
    return render_template('index.html', data=data)

@app.route('/update', methods=['POST', 'GET'])
def update():
    global data
    if request.method == 'POST':
        # Expecting a JSON payload from the local machine with the updated data
        json_data = request.get_json()
        if json_data:
            data.update(json_data)
            # Recalculate uptime and hit rate on the server side
            data['uptime'] = get_uptime()
            data['hit_rate'] = f"{calculate_hit_rate():.2f}"
            print(f"Updated data received: {data}")  # Debug print
            return jsonify({"status": "success"})
        else:
            return jsonify({"status": "error", "message": "No data received"}), 400
    elif request.method == 'GET':
        # Return the latest data to the webpage
        return jsonify(data)

@app.route('/muons')
def muons():
    return render_template('muons.html')

@app.route('/cosmic')
def cosmic():
    return render_template('cosmic.html')

@app.route('/about')
def about():
    return render_template('about.html')
